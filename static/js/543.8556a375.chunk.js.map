{"version":3,"file":"static/js/543.8556a375.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.scss?c430","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const onFilterChange = e => {\n    dispatch(updateFilter(e.target.value));\n  };\n  return (\n    <div className=\"pb-3\">\n      <p className=\"mb-2\">Find contact by name</p>\n      <input\n        type=\"text\"\n        onChange={onFilterChange}\n        placeholder=\"Search by name\"\n        className=\"form-control\"\n      />\n    </div>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const isExistingName = contacts.some(\n    contact => contact.name.toLowerCase() === name.toLowerCase()\n  );\n\n  const isExistingNumber = contacts.some(contact => contact.number === number);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (isExistingName) {\n      return alert(`Contact with name ${name} is already in contact`);\n    } else if (isExistingNumber) {\n      return alert(`Number ${number} is already in contact`);\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        const digitsOnly = value.replace(/\\D/g, '');\n        const truncatedNumber = digitsOnly.slice(0, 10);\n        const formattedNumber = truncatedNumber.replace(\n          /(\\d{3})(\\d{3})(\\d{4})/,\n          '$1-$2-$3'\n        );\n        setNumber(formattedNumber);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\" contact-form rounded   pt-3 p-3 ps-5 pe-5 ps-m-0 pb-lg-0 h-100\">\n      <h1 className=\"text-center mb-4\">Phonebook</h1>\n\n      <form\n        className=\"d-flex flex-column align-items-center  gap-4\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"mb-2 w-100\">\n          <label className=\"form-label w-100 \">\n            <h2 className=\"mb-1\">Name</h2>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"[A-Za-zА-ЯЁІЇЄҐа-яёіїєґ\\s]+\"\n              title=\"Name may contain only letters, apostrophe, dash, and spaces. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n        <div className=\"mb-2 w-100\">\n          <label className=\"form-label w-100\">\n            <h2 className=\"mb-1\">Number</h2>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n              title=\"Phone number must be digits and must contain 10 numbers\"\n              required\n              value={number}\n              onChange={handleChange}\n              className=\"form-control\"\n            />\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark fw-bold ps-4 pe-4\"\n        >\n          ADD CONTACT\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"itemBorder\":\"ContactItem_itemBorder__iSGKr\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport scss from './ContactItem.module.scss';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <li\n      className={`d-flex justify-content-between align-items-center p-2 ${scss.itemBorder}`}\n    >\n      <div className=\"d-flex align-items-center\">\n        <img\n          src=\"http://placehold.it/40x40\"\n          alt=\"error\"\n          className=\"rounded-circle me-2\"\n        />\n        <div>\n          <p className=\"m-0 fs-5 fw-medium \">{contact.name}</p>\n          <p className=\"m-0 text-body-secondary\">{contact.number}</p>\n        </div>\n      </div>\n      <button\n        className=\"btn btn-outline-dark rounded-3\"\n        type=\"button\"\n        onClick={handleDelete}\n      >\n        DELETE\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  return (\n    <ul className=\"border border-black rounded-4 p-0 bg-light\">\n      {filteredContacts.map(contact => (\n        <ContactItem key={contact.id} contact={contact}></ContactItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { BallTriangle } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"rgba(255, 199, 0, 1)\"\n        ariaLabel=\"ball-triangle-loading\"\n        wrapperClass={{}}\n        wrapperStyle=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","import { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <section className=\"container container-content \">\n      <div className=\"contacts-wrap  shadow-xlg \">\n        <div className=\"row \">\n          <div className=\"col-lg-7 \">\n            <ContactForm />\n          </div>\n          <div className=\"pt-3 col-lg-5 \">\n            <h2 className=\"mb-2\">My contacts</h2>\n            <Filter />\n\n            {isLoading && !error ? <Loader /> : <ContactList />}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["Filter","dispatch","useDispatch","_jsxs","className","children","_jsx","type","onChange","e","updateFilter","target","value","placeholder","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","isExistingName","some","isExistingNumber","handleChange","_e$target","formattedNumber","replace","slice","onSubmit","preventDefault","alert","concat","addContact","pattern","title","required","ContactItem","_ref","scss","src","alt","onClick","deleteContact","id","filteredContacts","map","Loader","BallTriangle","height","width","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","useEffect","fetchContacts","ContactList"],"sourceRoot":""}